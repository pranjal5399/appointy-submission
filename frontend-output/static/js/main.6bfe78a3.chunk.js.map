{"version":3,"sources":["components/newscard/NewsCard.js","components/wrapper/Wrapper.js","components/navbar/NavBar.js","components/bottombar/BottomBar.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","maxWidth","title","padding","fontWeight","fontFamily","fontSize","color","details","display","justifyContent","margin","content","overflow","ImgMediaCard","imageURL","date","classes","Card","className","CardActionArea","CardMedia","component","alt","height","image","CardContent","Typography","variant","news","require","map","id","NewsCard","key","Wrapper","theme","discover","flexGrow","NavBar","AppBar","position","Toolbar","IconButton","edge","style","blue","appBar","top","bottom","grow","BottomBar","green","App","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6bfe78a3.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxWidth: \"100vw\",\r\n  },\r\n  title: {\r\n    padding: '5px 16px',\r\n    fontWeight: '400',\r\n    fontFamily: 'Roboto',\r\n    fontSize:'17px',\r\n    color:'black'\r\n  },\r\n  details: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    margin: '20px',\r\n  },\r\n  content: {\r\n    overflow: \"hidden\",\r\n    fontWeight: \"300\",\r\n    padding: '0 16px',\r\n  }\r\n});\r\n\r\nconst ImgMediaCard = ({ imageURL, title, content, date }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardActionArea>\r\n        <CardMedia\r\n          component=\"img\"\r\n          alt=\"img\"\r\n          height=\"240\"\r\n          image={imageURL}\r\n        />\r\n        <CardContent>\r\n\r\n          <div className={classes.title}>\r\n            {title}\r\n          </div>\r\n\r\n          <div className={classes.content}>\r\n            {content}\r\n          </div>\r\n\r\n          <div className={classes.details}>\r\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"h2\">{date}</Typography>\r\n          </div>\r\n\r\n        </CardContent>\r\n      </CardActionArea>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default ImgMediaCard;","import React from 'react';\r\nimport NewsCard from '../newscard/NewsCard'\r\nimport SwipeableViews from 'react-swipeable-views';\r\n\r\nconst data = require('../../data.json');\r\n\r\nconst news = data.map(({ id, image, title, content, date }) => <NewsCard key={id} imageURL={image} title={title} content={content} date={date} />)\r\n\r\nconst Wrapper = () => {\r\n  return (\r\n    <SwipeableViews>\r\n      {news}\r\n    </SwipeableViews>\r\n  );\r\n};\r\n\r\n\r\nexport default Wrapper;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { blue } from '@material-ui/core/colors';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    discover: {\r\n        flexGrow: 0.6,\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nconst NavBar = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n\r\n        <AppBar position=\"static\" color=\"inherit\">\r\n            <Toolbar>\r\n                <IconButton edge=\"start\" style={{ color: blue[500] }}>\r\n                    <ArrowBackIosIcon />\r\n                </IconButton>\r\n\r\n                <Typography variant=\"body2\" className={classes.discover} >\r\n                    Discover\r\n                </Typography>\r\n\r\n\r\n                <Typography variant=\"body2\" className={classes.title} >\r\n                    My Feed\r\n                </Typography>\r\n\r\n\r\n                <IconButton edge=\"end\" style={{ color: blue[500] }}>\r\n                    <RefreshIcon />\r\n                </IconButton>\r\n\r\n            </Toolbar>\r\n        </AppBar>\r\n\r\n    );\r\n}\r\n\r\nexport default NavBar;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { blue, green } from '@material-ui/core/colors';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\r\nimport ShareOutlinedIcon from '@material-ui/icons/ShareOutlined';\r\nimport BookmarkBorderOutlinedIcon from '@material-ui/icons/BookmarkBorderOutlined';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    appBar: {\r\n        top: 'auto',\r\n        bottom: 0,\r\n    },\r\n    grow: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nconst BottomBar = () => {\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <AppBar position=\"fixed\" color=\"inherit\" className={classes.appBar}>\r\n            <Toolbar>\r\n                <div className={classes.grow} />\r\n                <IconButton style={{ color: green[500] }}>\r\n                    <FiberManualRecordIcon />\r\n                </IconButton>\r\n                <div style={{ 'fontSize': '10px' }}>Relevance</div>\r\n\r\n                <div className={classes.grow} />\r\n                <IconButton style={{ color: blue[500] }}>\r\n                    <ShareOutlinedIcon />\r\n                </IconButton>\r\n                <div style={{ 'fontSize': '10px' }}>Share</div>\r\n\r\n                <div className={classes.grow} />\r\n                <IconButton style={{ color: blue[500] }}>\r\n                    <BookmarkBorderOutlinedIcon />\r\n\r\n                </IconButton>\r\n                <div style={{ 'fontSize': '10px' }}>Bookmark</div>\r\n\r\n                <div className={classes.grow} />\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nexport default BottomBar\r\n","import React from 'react';\nimport './App.css';\nimport Wrapper from './components/wrapper/Wrapper';\nimport NavBar from './components/navbar/NavBar';\nimport BottomBar from './components/bottombar/BottomBar';\nclass App extends React.Component {\n  // componentDidMount=()=>{\n  //   alert('If you are PC please reload website once after changing viewport to mobile device. If already on mobile device you are good to go!');\n  // }\n  render(){\n    return (\n      <div className=\"App\">\n        <NavBar />\n        <Wrapper />\n        <BottomBar />\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}